<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spiiin&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://spiiin.github.io/"/>
  <updated>2020-09-01T18:13:25.949Z</updated>
  <id>http://spiiin.github.io/</id>
  
  <author>
    <name>spiiin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Уровень программирования: Middle</title>
    <link href="http://spiiin.github.io/blog/15798/"/>
    <id>http://spiiin.github.io/blog/15798/</id>
    <published>2020-08-12T08:58:08.000Z</published>
    <updated>2020-09-01T18:13:25.949Z</updated>
    
    <content type="html"><![CDATA[<p>Несколько очень часто встречающих у программистов-новичков ошибок<br><a id="more"></a></p><p>…</p><p><strong>1. Использование примитивов вместо высокоуровневых абстракций</strong></p><p>Новички часто пишут код “с нуля”, забывая о возможностях используемых фреймворков или библиотек. Фактически это просто неумение работать со сложными типами и игнорирование возможностей системы типов используемого языка.</p><blockquote><p>Каждый раз, когда необходимо завести переменную типа <code>int</code> - подумайте, действительно ли нужен просто целочисленный тип, или же с помощью типа можно сказать ещё что-то полезное о переменной</p></blockquote><p><strong>2. Реализация всей логики в одной функции</strong></p><p>Если какой-то кусок кода можно вынести в именованную функцию (даже если она не будет переиспользоваться), стоит так сделать. Функции проще объединять в классы или модули, чем “голый” код и разрастающиеся безымянные функции. Это нужно, чтобы уменьшить вероятность копи-пасты кода (точнее даже, умеьшения количества необходимых для изменения логики мест в коде).</p><blockquote><p>Можно ли описать одним небольшим предложением, что делает функция? Что делает класс? Что описано в файле/namespace/модуле?</p></blockquote><p><strong>3. Игнорирование инкапсуляции</strong></p><p>Инкапсуляция часто ошибочно трактуется новичками как необходимость делать все данные класса закрытыми. На практике лучше понимать и использовать её как средство сделать объект неломаемым пользователем. Т.е. если изменение переменных не может привести к тому, что класс будет находиться в невалидном состоянии - то и не надо их прятать. Если же для корректной работы с объектом у него нужно вызвать 5 разных методов в строго определенном порядке (а в других случаях программа падает), значит, нет у него никакой инкапсуляции. Пользователь объекта не должен помнить о том, что нельзя делать с объектов, чтобы не сломать его внутреннюю логику - сам объект должен быть неломаемым для пользователя.</p><blockquote><p>Таким образом в некоторых языках отказываются “ломающихся” абстракций и возможностей (<code>goto</code>, отказ от указателей, отказ от ручного освобождения памяти, отказ от мутабельности).</p></blockquote><p><strong>4. Персональный стиль</strong></p><p>По большей части, все программы пишутся несколькими людьми, так что вместо того, что писать в строго выработанном правильном стиле, стоит учиться подстраиваться под стиль уже написанного кода. Код на некоторых языках имеет стандартные правила написания, но даже с учётом этого необходимо помнить, что программа могла писаться, когда в ходу были другие правила, или же по каким-либо другим причинам использовать другой подход. Стоит писать так, чтобы стиль всей программы был одинаковый - так у читающего код будет меньше вопросов, почему в разных местах программы используются разные варианты (и какой стиль выбрать при изменении кода).</p><blockquote><p>Прежде чем писать код, прочитайте уже написанный</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Несколько очень часто встречающих у программистов-новичков ошибок&lt;br&gt;
    
    </summary>
    
    
    
      <category term="code" scheme="http://spiiin.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Карта прохождения игр</title>
    <link href="http://spiiin.github.io/blog/1563/"/>
    <id>http://spiiin.github.io/blog/1563/</id>
    <published>2020-08-04T19:11:37.000Z</published>
    <updated>2020-09-01T18:10:28.493Z</updated>
    
    <content type="html"><![CDATA[<p>Список игр на прохождение<br><a id="more"></a></p><h2 id="Current-list"><a href="#Current-list" class="headerlink" title="Current list"></a>Current list</h2><p><code>Captain Toad</code> - 90%<br><code>Age of Mythologies</code> - 50%<br><code>Gta 5</code> - 30%<br><code>The Witcher 2</code> - 5%</p><h2 id="Coop"><a href="#Coop" class="headerlink" title="Coop"></a>Coop</h2><p><code>The Stratchers</code> - 33%<br><code>Trine 4</code> - 30%<br><code>Minecraft</code> - 5%</p><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><p><code>Yoshi&#39;s Crafted World</code><br><code>The Forest</code></p><h2 id="Completed"><a href="#Completed" class="headerlink" title="Completed"></a>Completed</h2><p><code>Mario+Rabbids</code><br><code>Witcher</code><br><code>Legend of Zelda: BotW</code><br><code>Warhammer 40k: Mechanicus</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Список игр на прохождение&lt;br&gt;
    
    </summary>
    
    
    
      <category term="games" scheme="http://spiiin.github.io/tags/games/"/>
    
  </entry>
  
  <entry>
    <title>Привет, Hexo</title>
    <link href="http://spiiin.github.io/blog/47121/"/>
    <id>http://spiiin.github.io/blog/47121/</id>
    <published>2020-07-18T14:14:53.000Z</published>
    <updated>2020-09-15T15:24:43.416Z</updated>
    
    <content type="html"><![CDATA[<p>После нескольких дней возни в очередной попытке собрать на <code>jekyll</code> статический блог, решил забить на него и попробовать использовать для блога <a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>. Получилось сильно проще и приятнее.</p><p>Во-первых, <code>hexo</code> запускается легче, и темы работают сходу. И, что удобно для блога программисту, подсветка синтаксиса кода интегрирована в движок лучше, из чего следует, что темы скорее всего будут совместимы с ней (у <code>jekyll</code> подобрать работающую пару “тема+плагин подсветки синтаксиса” оказалось очень непросто, то съезжала нумерация длинных строк, то весь блок с кодом выглядел коряво, то были проблемы с корректным отображения цвета строк или фона)</p><a id="more"></a><p>Единственное, для корректной работы тем, иногда опытным путём, необходимо выяснить, какие плагины необходимо доустановить из <a href="https://hexo.io/plugins/" target="_blank" rel="noopener">списка</a>.</p><h2 id="Темы"><a href="#Темы" class="headerlink" title="Темы"></a>Темы</h2><p>Далее, выбор <a href="https://hexo.io/themes/" target="_blank" rel="noopener">тем</a>. Достаточно много качественных и приятных глазу, из тёмных и минималистичных интересными показались:</p><ul><li><a href="https://github.com/howardliu-cn/hexo-theme-clean-dark" target="_blank" rel="noopener">clean-dark</a><ul><li><a href="https://www.howardliu.cn/" target="_blank" rel="noopener">Пример</a></li><li>Оригинальная <a href="http://pavelmakhov.com/jekyll-clean-dark" target="_blank" rel="noopener">тема для jekyll</a>, которая была взята в качестве основы для этой темы</li></ul></li><li><a href="https://github.com/maochunguang/black-blue" target="_blank" rel="noopener">black-blue</a><ul><li><a href="http://maochunguang.github.io/" target="_blank" rel="noopener">Пример</a></li></ul></li><li><a href="https://github.com/tzvetkov75/solar-theme-hexo/" target="_blank" rel="noopener">solar</a><ul><li><a href="https://tzvetkov75.github.io/demo_blog/public/" target="_blank" rel="noopener">Пример</a>.</li><li>Тема на основе <a href="https://probberechts.github.io/hexo-theme-cactus/cactus-dark/public/" target="_blank" rel="noopener">cactus</a></li></ul></li><li><a href="https://github.com/lyndonoc/hexo-theme-pandollo" target="_blank" rel="noopener">pandollo</a><ul><li><a href="https://lyndonoc.github.io/" target="_blank" rel="noopener">Пример</a></li></ul></li></ul><h2 id="Настройка-темы"><a href="#Настройка-темы" class="headerlink" title="Настройка темы"></a>Настройка темы</h2><p>Минимальная настройка темы включает правку файла <code>config.yml</code>, какие именно настройки поддерживаются, обычно написано на сайте темы.</p><p>Дополнительно, на примере темы <code>pandolo</code> - можно донастроить стиль, разобравшись с правкой файлов в папке <code>themes/pandollo/source/scss</code>.</p><p>Дальше нужно выполнить команду:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sass --style&#x3D;compressed .&#x2F;main.scss ..&#x2F;css&#x2F;main.css</span><br></pre></td></tr></table></figure></p><p>Для того, чтобы сгенерировать упакованную версию файла стилей, которую будет использовать блог.</p><p>После небольших правок получилась примерно такая “лисья” тема:<br><img src="/blog/47121/hexo-fox.png" alt="hexo-fox"></p><h2 id="Настройка-плагинов"><a href="#Настройка-плагинов" class="headerlink" title="Настройка плагинов"></a>Настройка плагинов</h2><p>Для выбранной темы пригодятся следующие плагины:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">  ...</span><br><span class="line">  "hexo-asset-link": "^2.0.1",</span><br><span class="line">  "hexo-generator-fragments": "^1.0.0",</span><br><span class="line">  "hexo-renderer-kramed": "^0.1.4",</span><br><span class="line">  "hexo-renderer-jade": "^0.5.0",</span><br><span class="line">  "hexo-abbrlink": "^2.2.1",</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/liolok/hexo-asset-link" target="_blank" rel="noopener">hexo-asset-link</a> - позволяет использовать в постах ссылку на ассет в виде относительного пути: <code>POST_NAME/asset_name.png</code> (также нужно включить в <code>config.yml</code> опцию: <code>post_asset_folder: true</code>, чтобы hexo создавал отдельную папку для ассетов к каждому посту).</p><p><a href="https://github.com/mamboer/hexo-generator-fragments" target="_blank" rel="noopener">hexo-generator-fragments</a> - необходим для темы - генерирует preview для постов для главной страницы, позволяет использоватьв в постах тег <code>&lt;!-- more --&gt;</code> чтобы отмечать краткую короткую preview-версию поста.</p><p><a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="noopener">hexo-renderer-kramed</a> - плагины, содержащие в названии renderer, позволяют hexo генерировать посты из разных форматов файла. Данный плагин используется для рендера из файлов <code>*.md</code> в формате <code>github flavored markdown</code>, который используется на серверах <code>github</code>.<br>В комплекте с <code>hexo</code> уже идёт плагин, который рендерит markdown-файлы, поэтому чтобы использовать альтернативный, предварительно нужно его удалить:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-renderer-marked --save</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/hexojs/hexo-renderer-jade" target="_blank" rel="noopener">hexo-renderer-jade</a> - необходимый для темы плагин, позволяющий рендерить pug-файлы (собственно, сама тема описана в этом формате).</p><p><a href="https://github.com/Rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> - генерирует для каждого поста идентификатор. Для генерации имён постов необходимо в <code>config.yml</code> добавить строку:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">permalink: posts&#x2F;:abbrlink&#x2F;</span><br></pre></td></tr></table></figure><br>Для того, чтобы указать ссылку на пост, нужно использовать тег:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Написание-постов"><a href="#Написание-постов" class="headerlink" title="Написание постов"></a>Написание постов</h2><p>После установки и настройки темы можно попробовать добавить пост:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post hello-hexo.md</span><br></pre></td></tr></table></figure><br>Вместо md можно попробовать использовать другие форматы, для которых установлены render-плагины. В качестве редактора постов я бы посоветовал использовать (Visual Studio Code)[<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a>], вместе с плагином <a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/" target="_blank" rel="noopener">Markdown Enchanced Preview</a>.</p><p>Чтобы проверить, как выглядит пост, нужно запустить команду:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><br>и открыть в браузере страницу <code>http://127.0.0.1:4000/</code> (hexo отслеживает изменения исходников и сразу обновляет открытую страницу).</p><p>Сгенерировать статический сайт можно так:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p><p>Весь сгенерированный сайт будет содержаться в папке <code>public</code>, её можно заливать на хостинг руками или воспользоваться плагинами для автоматизации этих процессов.</p><h2 id="Итог"><a href="#Итог" class="headerlink" title="Итог"></a>Итог</h2><p>В кажущейся простой задаче “отрендерить markdown-статью в html”, cкрыт выбор целого стека способов решения (генераторы сайтов со своими языками, рендеры разных форматов и диалектов разметки, языки описания стилей и шаблонов сайта, темы, плагины, подсветка кода, системы развёртывания сайта).</p><p>В <code>hexo</code> эти вещи более-менее целостно сшиты вместе в единую систему, которой можно начать пользоваться достаточно быстро.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;После нескольких дней возни в очередной попытке собрать на &lt;code&gt;jekyll&lt;/code&gt; статический блог, решил забить на него и попробовать использовать для блога &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt;. Получилось сильно проще и приятнее.&lt;/p&gt;
&lt;p&gt;Во-первых, &lt;code&gt;hexo&lt;/code&gt; запускается легче, и темы работают сходу. И, что удобно для блога программисту, подсветка синтаксиса кода интегрирована в движок лучше, из чего следует, что темы скорее всего будут совместимы с ней (у &lt;code&gt;jekyll&lt;/code&gt; подобрать работающую пару “тема+плагин подсветки синтаксиса” оказалось очень непросто, то съезжала нумерация длинных строк, то весь блок с кодом выглядел коряво, то были проблемы с корректным отображения цвета строк или фона)&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://spiiin.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Коллекция постов в ЖЖ</title>
    <link href="http://spiiin.github.io/blog/35153/"/>
    <id>http://spiiin.github.io/blog/35153/</id>
    <published>2020-07-10T12:45:28.000Z</published>
    <updated>2020-08-04T19:27:29.052Z</updated>
    
    <content type="html"><![CDATA[<p>Коллекция ссылок на посты в ЖЖ<br><a id="more"></a></p><ul><li><a href="https://spiiin.livejournal.com/104515.html" target="_blank" rel="noopener">Устройство уровней NES-игр с блоками 16 тайлов + 1 байт палитры</a></li><li><a href="https://spiiin.livejournal.com/104049.html" target="_blank" rel="noopener">Duck Tales 2 lua script showing hidden diamonds</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Коллекция ссылок на посты в ЖЖ&lt;br&gt;
    
    </summary>
    
    
    
      <category term="link" scheme="http://spiiin.github.io/tags/link/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://spiiin.github.io/blog/16107/"/>
    <id>http://spiiin.github.io/blog/16107/</id>
    <published>2020-07-01T12:45:28.000Z</published>
    <updated>2020-09-15T16:28:46.711Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Hello, world!</strong><br>Немного тестов разметки<br><a id="more"></a></p><h1 id="Заголовок"><a href="#Заголовок" class="headerlink" title="Заголовок"></a>Заголовок</h1><h2 id="Подраздел"><a href="#Подраздел" class="headerlink" title="Подраздел"></a>Подраздел</h2><figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">echo <span class="string">"code without line numbers"</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>hello.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Code"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"with"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"line"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"numbers"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; end;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>hello.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="built_in">std</span> &#123;</span><br><span class="line">    <span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">tuple_element</span>&lt;0,Config&gt; &#123;</span> <span class="keyword">using</span> type = <span class="built_in">std</span>::string_view; &#125;;</span><br><span class="line">    <span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">tuple_element</span>&lt;1,Config&gt; &#123;</span> <span class="keyword">using</span> type = <span class="built_in">std</span>::<span class="keyword">size_t</span>; &#125;;</span><br><span class="line">    <span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">tuple_element</span>&lt;2,Config&gt; &#123;</span> <span class="keyword">using</span> type = <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp;; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class='spoiler collapsed'>    <div class='spoiler-title'>        gist    </div>    <div class='spoiler-content'>        <script src="//gist.github.com/44721f2e5a70294fa390218ad92385e4.js?file=james_bond_nim.nim"></script>    </div></div><blockquote><p>“Citate from me”</p><footer><strong>spiiin</strong></footer></blockquote><ul><li>список1</li><li>список2<ul><li>список21</li><li>список22<ul><li><em>список221</em></li></ul></li></ul></li><li>список3</li></ul><p><strong><code>code-bold</code></strong> <code>code</code></p><div class="table-container"><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center"><em>right-aligned</em></td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></div><p>Backticks escape: `are` these!</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Hello, world!&lt;/strong&gt;&lt;br&gt;Немного тестов разметки&lt;br&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://spiiin.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Игра в сегу по сети.</title>
    <link href="http://spiiin.github.io/blog/8741/"/>
    <id>http://spiiin.github.io/blog/8741/</id>
    <published>2014-12-22T04:49:00.000Z</published>
    <updated>2020-09-15T16:55:44.924Z</updated>
    
    <content type="html"><![CDATA[<style>.embed-container {    position: relative;    padding-bottom: 56.25%;    height: 0;    overflow: hidden;    max-width: 100%;  }  .embed-container iframe, .embed-container object, .embed-container embed {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;  }  </style><div class="embed-container"><iframe src="https://www.youtube.com/embed/m6OeJYWAJ6c" allowfullscreen frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"></iframe></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;.embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;
  }

      
    
    </summary>
    
    
    
      <category term="hack" scheme="http://spiiin.github.io/tags/hack/"/>
    
      <category term="link" scheme="http://spiiin.github.io/tags/link/"/>
    
      <category term="sega" scheme="http://spiiin.github.io/tags/sega/"/>
    
      <category term="hardware" scheme="http://spiiin.github.io/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>Battletoads heavy glitches</title>
    <link href="http://spiiin.github.io/blog/57614/"/>
    <id>http://spiiin.github.io/blog/57614/</id>
    <published>2013-01-08T15:21:00.000Z</published>
    <updated>2020-09-15T17:02:24.441Z</updated>
    
    <content type="html"><![CDATA[<style>.embed-container {    position: relative;    padding-bottom: 56.25%;    height: 0;    overflow: hidden;    max-width: 100%;  }  .embed-container iframe, .embed-container object, .embed-container embed {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;  }  </style><div class="embed-container"><iframe src="https://www.youtube.com/embed/bOweqz4cDlA" allowfullscreen frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"></iframe></div><p>Ну и весь канал у них там такой</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;.embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;
  }

      
    
    </summary>
    
    
    
      <category term="nes" scheme="http://spiiin.github.io/tags/nes/"/>
    
      <category term="hack" scheme="http://spiiin.github.io/tags/hack/"/>
    
      <category term="games" scheme="http://spiiin.github.io/tags/games/"/>
    
  </entry>
  
  <entry>
    <title>Fog</title>
    <link href="http://spiiin.github.io/blog/53133/"/>
    <id>http://spiiin.github.io/blog/53133/</id>
    <published>2011-05-02T19:17:00.000Z</published>
    <updated>2020-09-15T19:52:44.160Z</updated>
    
    <content type="html"><![CDATA[<p>На первое мая прошли от Резервного до Балаклавы 15 километров пешком. Туман в горах выглядит абсолютно нереально, когда смотришь на него сверху ^_^ <img src="https://lh6.googleusercontent.com/_GlFb37dM_jg/Tb6i-0mQnYI/AAAAAAAAAJw/xmgELvhsmJg/s720/DSC_0549.jpg" alt="">  <img src="https://lh6.googleusercontent.com/_GlFb37dM_jg/Tb6h63gEDVI/AAAAAAAAADY/iPNrex46DMc/s720/DSC_0286.jpg" alt=""> <img src="https://lh3.googleusercontent.com/_GlFb37dM_jg/Tb6i6dxjjEI/AAAAAAAAAJk/BODD3HIqpbI/s720/DSC_0537.jpg" alt=""> <img src="https://lh4.googleusercontent.com/_GlFb37dM_jg/Tb6i2f_sEVI/AAAAAAAAAI8/7HiUp5dl2fA/s720/DSC_0519.jpg" alt=""> <img src="https://lh3.googleusercontent.com/_GlFb37dM_jg/Tb6i65R1XoI/AAAAAAAAAJo/av8zjmpRnv4/s720/DSC_0540.jpg" alt=""> </p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;На первое мая прошли от Резервного до Балаклавы 15 километров пешком. Туман в горах выглядит абсолютно нереально, когда смотришь на него 
      
    
    </summary>
    
    
    
      <category term="log" scheme="http://spiiin.github.io/tags/log/"/>
    
      <category term="photo" scheme="http://spiiin.github.io/tags/photo/"/>
    
  </entry>
  
  <entry>
    <title>Асм 6502</title>
    <link href="http://spiiin.github.io/blog/57911/"/>
    <id>http://spiiin.github.io/blog/57911/</id>
    <published>2011-04-25T18:53:00.000Z</published>
    <updated>2020-09-15T19:52:44.158Z</updated>
    
    <content type="html"><![CDATA[<p>Нашел редкую на просторах интернетов книгу: <a href="http://dl.dropbox.com/u/852723/Books/%D0%9C%D0%BE%D1%80%D0%B5%D1%80%20%D0%A3.%20-%20%D0%AF%D0%B7%D1%8B%D0%BA%20%D0%90%D1%81%D1%81%D0%B5%D0%BC%D0%B1%D0%BB%D0%B5%D1%80%D0%B0%20%D0%B4%D0%BB%D1%8F%20%D0%BF%D0%B5%D1%80%D1%81%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D1%85%20%D0%BA%D0%BE%D0%BC%D0%BF%D1%8C%D1%8E%D1%82%D0%B5%D1%80%D0%BE%D0%B2%20%D0%AD%D0%9F%D0%9B%20%281987%2C%20%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%B0%29.djvu" target="_blank" rel="noopener">Морер У. - Язык Ассемблера для персональных компьютеров ЭПЛ</a> Асм для процессора 6502 ^_^ . Того самого, что стоит здесь: <img src="http://pics.livejournal.com/spiiin/pic/00018x2z" alt="bender"> здесь: <a href="http://pics.livejournal.com/spiiin/pic/00019tf6/" target="_blank" rel="noopener"><img src="http://pics.livejournal.com/spiiin/pic/00019tf6" alt=""></a> и здесь: <a href="http://pics.livejournal.com/spiiin/pic/0001aeqr/" target="_blank" rel="noopener"><img src="http://pics.livejournal.com/spiiin/pic/0001aeqr" alt=""></a> В книге есть главы, посвященные Apple Disk Operating System и ассемблеру LISA, они интереса не представляют, в отличие от разделов собственно о программировании и процессоре (статьи 1-32, 50-64, 67-68, 74-80).</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Нашел редкую на просторах интернетов книгу: &lt;a href=&quot;http://dl.dropbox.com/u/852723/Books/%D0%9C%D0%BE%D1%80%D0%B5%D1%80%20%D0%A3.%20-%20
      
    
    </summary>
    
    
    
      <category term="nes" scheme="http://spiiin.github.io/tags/nes/"/>
    
      <category term="asm" scheme="http://spiiin.github.io/tags/asm/"/>
    
      <category term="dev" scheme="http://spiiin.github.io/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>Смурфы</title>
    <link href="http://spiiin.github.io/blog/52136/"/>
    <id>http://spiiin.github.io/blog/52136/</id>
    <published>2011-04-13T10:19:00.000Z</published>
    <updated>2020-09-15T20:09:19.973Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://itunes.apple.com/us/app/smurfs-village/id399648212?mt=8" target="_blank" rel="noopener">Smurfs’ Village</a>  </p><p><img src="http://a1.mzstatic.com/us/r1000/045/Purple/47/45/c1/mzl.huogfvcu.320x480-75.jpg" alt=""><br>Вспомнилось, как в детстве играл с племянницей в такую же игру, используя фигурки из “Киндер-Сюрпризов”, игральные кубики, нити, пуговицы, шашки, детский конструктор, несколько колод карт и фантазию. Деревни разрастались на полкомнаты, а сейвы с перечнем имущества занимали пару тетрадных листов в клеточку.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://itunes.apple.com/us/app/smurfs-village/id399648212?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Smurfs’ Village&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img
      
    
    </summary>
    
    
    
      <category term="games" scheme="http://spiiin.github.io/tags/games/"/>
    
      <category term="iphone" scheme="http://spiiin.github.io/tags/iphone/"/>
    
  </entry>
  
  <entry>
    <title>Сортировка за 4 с половиной минуты</title>
    <link href="http://spiiin.github.io/blog/12182/"/>
    <id>http://spiiin.github.io/blog/12182/</id>
    <published>2011-04-12T20:20:00.000Z</published>
    <updated>2020-09-15T16:58:37.916Z</updated>
    
    <content type="html"><![CDATA[<style>.embed-container {    position: relative;    padding-bottom: 56.25%;    height: 0;    overflow: hidden;    max-width: 100%;  }  .embed-container iframe, .embed-container object, .embed-container embed {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;  }  </style><div class="embed-container"><iframe src="https://www.youtube.com/embed/CmPA7zE8mx0" allowfullscreen frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"></iframe></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;.embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;
  }

      
    
    </summary>
    
    
    
      <category term="link" scheme="http://spiiin.github.io/tags/link/"/>
    
  </entry>
  
  <entry>
    <title>Iconoclasts</title>
    <link href="http://spiiin.github.io/blog/58472/"/>
    <id>http://spiiin.github.io/blog/58472/</id>
    <published>2011-04-11T16:03:00.000Z</published>
    <updated>2020-09-15T20:08:43.630Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.konjak.org/index.php?folder=2&amp;file=2" target="_blank" rel="noopener">Joakim Sandberg aka konjak</a>, автор <a href="http://www.konjak.org/index.php?folder=4&amp;file=10" target="_blank" rel="noopener">Noitu Love 2</a> и других чудных платформеров, выложил в сеть еще один недоделанный пока платформер <a href="http://www.mediafire.com/?qssv6t49afhfios" target="_blank" rel="noopener">Iconoclasts</a>:  </p><p>Ураганный геймлей и ламповая пиксельная графика присутствуют.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.konjak.org/index.php?folder=2&amp;amp;file=2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Joakim Sandberg aka konjak&lt;/a&gt;, автор &lt;a hre
      
    
    </summary>
    
    
    
      <category term="games" scheme="http://spiiin.github.io/tags/games/"/>
    
  </entry>
  
  <entry>
    <title>Памятка для начинающего iphone и macosx gamedeveloper&#39;а</title>
    <link href="http://spiiin.github.io/blog/42980/"/>
    <id>http://spiiin.github.io/blog/42980/</id>
    <published>2011-04-10T12:18:00.000Z</published>
    <updated>2020-09-15T20:08:11.923Z</updated>
    
    <content type="html"><![CDATA[<p>Cижу, изучаю маковских <a href="http://bash.org.ru/quote/408098" target="_blank" rel="noopener">юных дев</a> , курю маны. Небольшая памятка: 1. Компилятор и <a href="http://www.gnu.org/software/binutils/" target="_blank" rel="noopener">binutils</a> </p><h2 id="Тулзы"><a href="#Тулзы" class="headerlink" title="Тулзы"></a>Тулзы</h2><p><strong>gcc + cc + g++ </strong>- набор компиляторов, gcc вроде вызывает нужный, но иногда удобнее вызвать необходимый, чем подбирать командную строку, перекрывающую его умолчания. </p><p>Важные параметры:<br>-x передать параметр линкеру<br>-Ox - уровень оптимизации с номером x, x больше -&gt; оптимизации сильнее. Включают в себя сразу наборы из разных опций оптимизации и генерации отладочной информации. </p><p>Стадии:<br>-E препроцессинг<br>-S ассемблерный листинг -c только компиляция, не генерировать объектный код<br>-Dсимвол - передать дефайн препроцессору<br>-Wтекст - включение предупреждений<br>-Werror - считать предупреждения ошибками. Для фанатиков чистоты.<br>-iпуть - искать заголовочные файлы в заданной папке. Может встречаться в командной строке несколько раз.<br>-arch тип - архитектура, под которой будет выполняться код. Можно задать сразу несколько. </p><p><strong>ld</strong> - линкер. </p><p>-lлиб - подключить библиотеку с именем либ<br>-Lпуть - путь к библиотекам<br>-framework<br>-weak_framework - подключить <a href="http://developer.apple.com/library/mac/#documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html" target="_blank" rel="noopener">фреймворк</a> (являющийся набором заголовочных файлов, ресурсов, библиотек). </p><p><strong>ar и ranlib</strong> - утилиты для сборки файлов в библиотеку для последующей линковки. В более широком применении - архиватор.</p><p><strong>nm</strong> - просмотр информации о библиотеках и исполнимых файлах.</p><p><strong>strip</strong> - вырезалка имен символов.</p><p><strong>arch и lipo</strong> - позволяют управлять исполнимыми файлами, содержащими несколько архитектур (создавать и запускать разные версии). Мак под рукой поддерживает i386, x64_86 и ppc.</p><p><strong>sign</strong> - подписать файл сертификатом разработчика.</p><p>Еще бы gdc и shark упомянуть, но я ими не пользуюсь.</p><h2 id="Cocoa"><a href="#Cocoa" class="headerlink" title="Cocoa"></a>Cocoa</h2><p> <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/EventOverview/Introduction/Introduction.html#//apple_ref/doc/uid/10000060i-CH1-SW1" target="_blank" rel="noopener">Cocoa Event-Handling Guide</a> </p><p><a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaViewsGuide/Introduction/Introduction.html" target="_blank" rel="noopener">View programming guide</a> (часть) </p><p><a href="http://developer.apple.com/library/mac/#documentation/GraphicsImaging/Conceptual/OpenGL-MacProgGuide/opengl_drawing/opengl_drawing.html" target="_blank" rel="noopener">Opengl programming guide</a> </p><p><a href="http://developer.apple.com/" target="_blank" rel="noopener">http://developer.apple.com/</a> - доки по NSObject, NSResponder, NSBundle, NSApplication, NSRunLoop, NSWindow, NSView, NSOpenGLView, NSTimer, NSApplicationDelegate, NSViewController </p><p>Как создать приложение без главного nib-файла : <a href="http://lapcatsoftware.com/blog/2007/06/10/working-without-a-nib-part-5-no-3" target="_blank" rel="noopener">http://lapcatsoftware.com/blog/2007/06/10/working-without-a-nib-part-5-no-3</a> (правка info.plist + перегрузка NSApplication + подстановка своего класса вместо NSBundle + настройки стилей NSWindow для приема событий мыши и клавиатуры и внешнего вида) </p><h2 id="Render"><a href="#Render" class="headerlink" title="Render"></a>Render</h2><p>Нативными для GUI являются <code>Cocoa</code> или <code>Carbon</code>. </p><p>Cocoa лежит во фреймфорке ApplicationKit/UIKit (для macosx / iphone)<br>В Cocoa для рисования можно использовать Quartz или OpenGL. </p><p><code>OpenGL</code> представлена в виде фреймворка OpenGL, в котором содержатся библиотеки <code>gl, glu, glut, glx</code>.</p><p>Для использования OpenGL можно выбрать надстройки CGL* и NSOpenGL. Вторая состоит готовых классов-наборов установок для первой, а также частично просто дублирует классы CGL.</p><p>A drawable object can be any of the following: a Cocoa view, offscreenmemory, a full-screen graphics device, or a pixel buffer. - Смешивать отрисовку контролов из Cocoa и отрисовку OpenGL надо также аккуратно, как и в любой другой ОС. А лучше вообще не смешивать.</p><p>Полезная схема : <img src="http://developer.apple.com/library/mac/documentation/graphicsimaging/conceptual/OpenGL-MacProgGuide/art/opengl_architecture.jpg" alt="opengl on mac"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cижу, изучаю маковских &lt;a href=&quot;http://bash.org.ru/quote/408098&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;юных дев&lt;/a&gt; , курю маны. Небольшая памят
      
    
    </summary>
    
    
    
      <category term="objc" scheme="http://spiiin.github.io/tags/objc/"/>
    
      <category term="opengl" scheme="http://spiiin.github.io/tags/opengl/"/>
    
  </entry>
  
  <entry>
    <title>Анти-мморпг пост</title>
    <link href="http://spiiin.github.io/blog/32194/"/>
    <id>http://spiiin.github.io/blog/32194/</id>
    <published>2011-04-05T20:29:00.000Z</published>
    <updated>2020-09-15T19:52:44.148Z</updated>
    
    <content type="html"><![CDATA[<p>Не люблю массовые онлайновые игры.  </p><p>Вот есть казуальные игры, типа тетриса, когда игрок получает фан от самого процесса игры.<br>Разработчики хорошо знают, какими должны быть игры такого типа. Максимально простой (каждое нетривиальное действие сопровождается хинтом, как правильно его выполнить) и веселой (раз в несколько уровней – повышение сложности или новая игровая фича), любое действие поощряется очками или, как сейчас модно, подчеркиванием игровых достижений (ачивментами). Хардкорного геймера можно приманить либо возможностью набрать 100500 очков за особо крутые действия, либо режимом с <a href="http://www.youtube.com/watch?v=jwC544Z37qo" target="_blank" rel="noopener">неебической</a> сложностью. Пример очень правильной казуальной игры - <a href="http://2dboy.com/games.php" target="_blank" rel="noopener">World Of Goo</a>, там и очки, и дополнительные цели миссии с повышенной сложностью и фриплей “Кто постоит самую высокую башню”. Цель - перебороть игру, чтобы пройти все миссии или просто набрать как можно больше очков.  </p><p>Eсть сюжетные игры, в которых основная задача - дойти до конца. Они воспринимаются как интерактивный фильм или книга, кому что ближе. Их объединяет то, что во всех таких играх цель - закончить игру. Волею геймдизайнера игроку, чтобы увидеть самую финальную заставку, может потребоваться пройти игру заново на более высокой сложности прокачанным героем (стандартно для рпг), новым персонажем с другой игровой механикой (часто встречается в файтингах), или выполнить в ходе прохождения дополнительные цели (вообще много где). Наиболее простой способ удержать игрока на несколько прохождений - миссии с двумя или более вариантами решения или возможность кооперативного прохождения. Но все равно, любая такая игра должна закончится, и в этом ее прелесть.  </p><p>Еще один класс - соревновательные игры. Все спортивные симуляторы, все стратегии, куча шутеров, все файтинги, симулятор <a href="http://spiiin.livejournal.com/28638.html" target="_blank" rel="noopener">сянци</a>. Цель игры: да-да, выиграть партию, любой ценой.  </p><p>А вот в онлайновых играх цели нет, потому что игроку нечего терять. Почему-то для многих ценностью является то, что они успели накопить за игру. Хотя частично в mmorpg есть и элемент набора очков (прокачка) и сюжет (квесты на убийство самых сильных боссов) и соревнование (PvP). Но, ничто из этого не является приоритетным, и проигрыш ни в чем не является фатальным. Невозможно поверить, что тебя могут убить, так как знаешь, что вне зависимости от тебя, в мире будут бегать (летать, ползать, плавать) еще сотни таких же, как ты. Невозможно поверить, что миру угрожает опасность - если текущий САМЫЙ ГЛАВНЫЙ ЗЛОДЕЙ со своей армией внезапно расправится одновременно со всеми игроками сервера, ничего страшного не случится, ведь игроки платят за подписку. И даже если найдешь какой-то секрет, который позволит стать самым крутым во всем мире, воспользоваться им все равно будет невозможно. Не хватает самого главного, что есть в играх - GAME OVER’а.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Не люблю массовые онлайновые игры.  &lt;/p&gt;
&lt;p&gt;Вот есть казуальные игры, типа тетриса, когда игрок получает фан от самого процесса игры.&lt;br&gt;
      
    
    </summary>
    
    
    
      <category term="games" scheme="http://spiiin.github.io/tags/games/"/>
    
  </entry>
  
  <entry>
    <title>Totoro</title>
    <link href="http://spiiin.github.io/blog/48278/"/>
    <id>http://spiiin.github.io/blog/48278/</id>
    <published>2011-03-22T21:57:00.000Z</published>
    <updated>2020-09-15T20:02:57.205Z</updated>
    
    <content type="html"><![CDATA[<p>Добрее мультика не видел еще.</p><p><a href="http://www.ffmpeg.org/" target="_blank" rel="noopener">ffmpeg</a> <a href="http://www.imagemagick.org/script/index.php" target="_blank" rel="noopener">imagemagick</a> </p><p><em>ffmpeg.exe -vcodec mpeg4 -i totoro.avi -ss 1:20:05 -vframes 96 -v 0 movie%%03d.png for %%x in (</em>.png) do convert.exe %%x -resize 75%% %%~nx.jpg convert <em>.jpg kotobus.gif</em></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Добрее мультика не видел еще.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ffmpeg.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ffmpeg&lt;/a&gt; &lt;a href=&quot;http://www.image
      
    
    </summary>
    
    
    
      <category term="codespell" scheme="http://spiiin.github.io/tags/codespell/"/>
    
      <category term="anime" scheme="http://spiiin.github.io/tags/anime/"/>
    
  </entry>
  
  <entry>
    <title>Сянци</title>
    <link href="http://spiiin.github.io/blog/35513/"/>
    <id>http://spiiin.github.io/blog/35513/</id>
    <published>2011-03-17T22:02:00.000Z</published>
    <updated>2020-09-15T20:02:17.253Z</updated>
    
    <content type="html"><![CDATA[<p>Уже третий день рубаю на эмуляторе NES в <a href="http://russian-emulation.ru/load/rom_igru/dendy_nintendo/qi_wang_chinese_chess/3-1-0-380" target="_blank" rel="noopener">Qi Wang - Chinese Chess</a> ( aka <code>Zhong Guo Xiang Qi</code>) против легкого компьютера. </p><p>Слил уже партий 20, но постепенно учусь. В детстве попадалась эта игра на картридже, но там без описания фигур обычно все заканчивалось на втором-третьем ходу, матом пушкой, как я сейчас понимаю, с правилами разобраться было сложно за время до поражения :) По ссылке же - русифицированная версия, и, что более важно, вместо иероглифов на фигурах нарисованы их приближенные к шахматам значки. </p><p>Конь, например, тут ходит на одну клетку прямо и затем на одну по диагонали, причем не может перескакивать через фигуру, которая блокирует его первый шаг, поэтому 2 коня, один напротив другого, могут прикрывать друг друга несимметрично, а пат считается не ничьей, а поражением игрока, попавшего в безвыходную ситуацию. Описание правил есть в архиве с ромом или, более наглядное, на <a href="http://ru.wikipedia.org/wiki/%D0%A1%D1%8F%D0%BD%D1%86%D0%B8" target="_blank" rel="noopener">википедии</a>. <img src="http://upload.wikimedia.org/wikipedia/ru/thumb/4/43/Xiangqi.png/300px-Xiangqi.png" alt=""></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Уже третий день рубаю на эмуляторе NES в &lt;a href=&quot;http://russian-emulation.ru/load/rom_igru/dendy_nintendo/qi_wang_chinese_chess/3-1-0-38
      
    
    </summary>
    
    
    
      <category term="nes" scheme="http://spiiin.github.io/tags/nes/"/>
    
      <category term="games" scheme="http://spiiin.github.io/tags/games/"/>
    
  </entry>
  
  <entry>
    <title>Build</title>
    <link href="http://spiiin.github.io/blog/62622/"/>
    <id>http://spiiin.github.io/blog/62622/</id>
    <published>2011-02-25T20:43:00.000Z</published>
    <updated>2020-09-15T20:01:35.575Z</updated>
    
    <content type="html"><![CDATA[<p>Тривиальные вещи, а знают не все С++-программисты. </p><p>Когда приложение собирается из более чем одного файла, они скармливаются компилятору последовательно. При этом единицей компиляции являются только файлы с исходным кодом. </p><p>Заголовные файлы aka хидеры просто подставляются на то место исходника, где стоит директива #include (указание препроцессору заменить ее на текст файла), и все, более для компилятора как источник кода эти файлы не существуют.</p><p><strong>Т.е. если в двух файлах с исходным кодом написать #include “header.h”, то компилятор воткнет этот файл в каждый из исходников, директива #pragma once и #ifdef с уникальным именем файла нужны не для этого.</strong>.</p><ul><li>Нету даже защиты от рекурсивного включения - 2 заголовочных файла, включающих друг друга, позволяют проверить, насколько используемый компилятор устойчив к выходкам дураков. </li></ul><p>Например, MSVS 2008 выдает в таких ситуациях <code>fatal error C1014: too many include files : depth = 1024.</code></p><p> Собственно, компилятор можно попросить остановиться на стадии подстановки инклюдов (как и на любой другой) и изучить результат. Помимо <code>#include</code> препроцессор также выполняет и другие директивы, например, заменяет __LINE__ на номер текущей строки, и раскрывает макросы.  </p><p> <strong>Препроцессор просто заменяет один текст на другой, вычисления на данном этапе не проводятся, и числа существуют только в виде строки текста</strong></p><p> Препроцессор проходит по тексту последовательно и имеет состояние, которое может изменяться в ходе обработки текста и проверяться простыми логическими предикатами. Состоянием может управлять текст, который стоит выше места включения и программист/его среда разработки, передающие это состояние при вызове команды компиляции. </p><p> <strong>То есть #define перед #include может полностью поменять то, что попадет в результате в файл.</strong></p><p> Дальше идет компиляция собранного большого куска текста. По каким именно правилам она будет проходит, зависит от переданной командной строки. По умолчанию еще часто от расширения файла.</p><p> <strong>Если компиляция прошла успешно, будет создан объектный файл (object file, хз, как адекватно перевести), содержащий код, а также таблицу имен для содержащихся в модуле функций.</strong></p><p> Для разных языков и компиляторов приняты разные соглашения о названиях имен (<a href="http://en.wikipedia.org/wiki/Name_mangling" target="_blank" rel="noopener">Name mangling</a> ), поэтому объектный файл, собранный одним компилятором, может не подойти для другого (скорее всего так и будет!).</p><p> О подводных камнях именования функций в связке языков C/C++/Objective C/Objective C++ напишу отдельным постом. </p><p> Также система сборки обычно следит за изменениями в исходных/заголовочных файлах и не занимается пересборкой неизменившихся файлов, но, как и все остальные, эта абстракция иногда протекает. Если каждый из исходных файлов был успешно перемолот, в дело вступает компоновщик, которые объединяет эти файлы и подставляет нужные адреса функций, используя таблицу имен (за счет этого функции из одного файла могут быть вызваны из другого).</p><p> На данном этапе может обнаружиться нехватка некоторых функций, которые были где-то объявлены, но ни в одном из файлов так и не нашлось реализации.</p><p> Напоследок, опять же, в зависимости от правил, переданных компоновщику, он помечает некоторый адрес, как точку начала кода, может прилинковать к выходному файлу ресурсы, обрамляет код метками, по которым, операционная система узнает, что перед ней - библиотека, исполнимый файл или еще что, и рапортует - сборка программы завершена, вероятно ошибок сборки нет!</p><p> *Из того, что хидер попадет по разу в каждый исходник, который его включает, следует, что в хидеры можно выносить только объявления, а не определения символов. Что является определением, а что объявлением чаще всего понятно (пункт 3.1 стандарта С++, занимает всего одну страницу, как для С++ это очень мало). </p><p> Впрочем, иногда в случае объявлений даже компилятору без дополнительных подсказок неясно, поэтому в языке появилось <a href="http://alenacpp.blogspot.com/2006/08/typename.html" target="_blank" rel="noopener">слово typename</a>.</p><p> Еще становится понятно, что в заголовочных файлах шаблонные функции и классы необходимо и объявлять и определять - в каждый файл должно попасть не только объявление функции, но и ее тело, чтобы компилятор мог по нему инстанциировать шаблонную функцию или класс для каждого типа. Такой подход плох тем, что для одного и того же типа может быть создан одинаковый код шаблонной функции для работы с этим типом. Для обхода этой проблемы придумали,например, <a href="http://www.comeaucomputing.com/techtalk/templates" target="_blank" rel="noopener">export templates</a>.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Тривиальные вещи, а знают не все С++-программисты. &lt;/p&gt;
&lt;p&gt;Когда приложение собирается из более чем одного файла, они скармливаются компи
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://spiiin.github.io/tags/c/"/>
    
      <category term="dev" scheme="http://spiiin.github.io/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>Always forward</title>
    <link href="http://spiiin.github.io/blog/14694/"/>
    <id>http://spiiin.github.io/blog/14694/</id>
    <published>2011-02-09T21:14:00.000Z</published>
    <updated>2020-09-15T19:57:11.069Z</updated>
    
    <content type="html"><![CDATA[<p>А вот 16-летний парень <a href="http://tasvideos.org/HappyLee.html" target="_blank" rel="noopener">HappeLee</a> из Китая прошел Супер Марио за 4:57, на 1 кадр быстрее предыдущего рекорда</p><style>.embed-container {    position: relative;    padding-bottom: 56.25%;    height: 0;    overflow: hidden;    max-width: 100%;  }  .embed-container iframe, .embed-container object, .embed-container embed {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;  }  </style><div class="embed-container"><iframe src="https://www.youtube.com/embed/4YHWOV5s6HI" allowfullscreen frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"></iframe></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;А вот 16-летний парень &lt;a href=&quot;http://tasvideos.org/HappyLee.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HappeLee&lt;/a&gt; из Китая прошел Супер Мар
      
    
    </summary>
    
    
    
      <category term="nes" scheme="http://spiiin.github.io/tags/nes/"/>
    
      <category term="link" scheme="http://spiiin.github.io/tags/link/"/>
    
  </entry>
  
  <entry>
    <title>GoogleLookup</title>
    <link href="http://spiiin.github.io/blog/40741/"/>
    <id>http://spiiin.github.io/blog/40741/</id>
    <published>2011-01-18T22:22:00.000Z</published>
    <updated>2020-09-15T19:52:44.133Z</updated>
    
    <content type="html"><![CDATA[<p>Если в Google Docs создать таблицу и в ячейке написать формулу:<br><em>=GoogleLookup(“Chuck Norris”; “kill”)</em><br>можно узнать, сколько людей убил Чак Норрис</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Если в Google Docs создать таблицу и в ячейке написать формулу:&lt;br&gt;&lt;em&gt;=GoogleLookup(“Chuck Norris”; “kill”)&lt;/em&gt;&lt;br&gt;можно узнать, скольк
      
    
    </summary>
    
    
    
      <category term="fun" scheme="http://spiiin.github.io/tags/fun/"/>
    
      <category term="google" scheme="http://spiiin.github.io/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>Как устроиться на работу программистом</title>
    <link href="http://spiiin.github.io/blog/1048/"/>
    <id>http://spiiin.github.io/blog/1048/</id>
    <published>2011-01-15T10:08:00.000Z</published>
    <updated>2020-09-15T19:55:45.793Z</updated>
    
    <content type="html"><![CDATA[<p>В связи периодическими вопросами от бывших уже однокурсников, куда пойти работать, “чтобы научиться”, подробная инструкция, как устроиться на работу программистом.</p><ul><li>Понять, нужно ли работать именно по этой специальности. </li></ul><p>Пункты 1,2 и 3 по идее должны были быть пройдены в университете. Если нет, подумать, будет ли интересно повторять это самому, если не было интересно делать за время учебы. </p><ul><li>Прочитать книгу по любому языку программирования.</li></ul><p>Пофиг какому. Нет лучшего или худшего на этой стадии, любой сойдет, главное, понять как пишутся. Паскаль, с++, питон, ява, C#, любой другой. Можно не до конца, главное узнать все основные языковые конструкции.</p><ul><li>В ходе прочтения писать программы.</li></ul><p>Цель - уметь самостоятельно реализовать любой простой алгоритм, научиться делать так, чтобы он корректно работал на любых входных данных. Примеры алгоритмов - решение квадратного уравнения, сортировки, выборка информации из матрицы, поиск подстроки в строке.</p><ul><li>Изучить работу с любым построителем интерфейса пользователя или библиотекой.</li></ul><p>Полезть в справку к ней, почитать примеры использования. Написать свой аналог любой из простых программ операционной системы - текстовый редактор, браузер файлов, просмотрищик картинок или аудиоплейер, пользуясь готовыми компонентами.</p><ul><li>В принципе все, можно искать вакансии, отправлять резюме и идти проходить собеседования на работу.</li></ul><p>Там проверят знание языка на простом алгоритме (как в пункте 2) и попросят выполнить тестовое задание (как в пункте 3). Но, по хорошему, чтобы не офигевать на работе первый месяц-два и не писать говнокод, лучше еще сделать следующее: </p><ul><li>Скачать и посмотреть, как написан какой-нибудь проект с открытыми исходниками.</li></ul><p>Прочувствовать разницу в оформлении кода (обработка входных данных, комментирование и документация, использование идиом языка, платформонезависимый код, потоковая безопасность и безопасность относительно исключений(exception safety), исключение дублирования кода). Можно попробовать довести одну из своих программ до ума и потом показать ее на собеседовании или просто рассказать, как и что в ней работает. </p><ul><li>В случае точного понимания, в какой сфере имеется желание работать - разобраться с основными понятиями предметной области.</li></ul><p>Например в геймдеве это начало аналитической геометрии (использование векторов и матриц для преобразований в пространстве, уравнения прямой и плоскости, понятие нормали). Курить документацию и много потом придется в любом случае, но начать лучше заранее. И да - документация будет на английском языке. Дальше будет еще много пунктов, но для трудоустройства начинающему этого точно хватит.</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;В связи периодическими вопросами от бывших уже однокурсников, куда пойти работать, “чтобы научиться”, подробная инструкция, как устроитьс
      
    
    </summary>
    
    
    
      <category term="dev" scheme="http://spiiin.github.io/tags/dev/"/>
    
  </entry>
  
</feed>
